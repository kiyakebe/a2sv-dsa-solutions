# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class UnionFind:
    def __init__(self, size) -> None:
        self.parent = {i: i for i in range(size)}
        self.size = {i: 1 for i in range(size)}
        self.dis_parent = defaultdict(int)
    
    def find(self, x):
        while x != self.parent[x]:
            self.parent[x] = self.parent[self.parent[x]]
            x = self.parent[x]
        return x
    
    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y:
            return
        if self.size[x] > self.size[y]:
            self.parent[y] = x
            self.size[x] += self.size[y]
        else:
            self.parent[x] = y
            self.size[y] += self.size[x]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)

        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    uf.union(i, j)
        
        for i in initial:
            par = uf.find(i)
            uf.dis_parent[par] += 1
        
        _mins = []
        spread = float("-inf")

        for i in initial:
            par = uf.find(i)
            if uf.dis_parent[par] == 1:
                if uf.size[par] > spread:
                    _mins = [i]
                    spread = uf.size[par]
                if uf.size[par] == spread:
                    _mins.append(i)

        if _mins:
            return min(_mins)

        return min(initial)